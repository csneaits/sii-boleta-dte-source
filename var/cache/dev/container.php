<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class CachedContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'Derafu\\Backbone\\Contract\\PackageRegistryInterface' => 'getPackageRegistryInterfaceService',
            'libredte.lib.billing' => 'getLibredte_Lib_BillingService',
            'libredte.lib.mail' => 'getLibredte_Lib_MailService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Derafu\\Certificate\\Contract\\CertificateFakerInterface' => true,
            'Derafu\\Certificate\\Contract\\CertificateLoaderInterface' => true,
            'Derafu\\Certificate\\Contract\\CertificateServiceInterface' => true,
            'Derafu\\Mail\\Component\\Exchange\\Contract\\ExchangeComponentInterface' => true,
            'Derafu\\Mail\\Component\\Exchange\\Worker\\Receiver\\Contract\\ReceiverWorkerInterface' => true,
            'Derafu\\Mail\\Component\\Exchange\\Worker\\Sender\\Contract\\SenderWorkerInterface' => true,
            'Derafu\\Mail\\Contract\\MailPackageInterface' => true,
            'Derafu\\Renderer\\Contract\\RendererInterface' => true,
            'Derafu\\Repository\\Contract\\RepositoryManagerInterface' => true,
            'Derafu\\Repository\\Service\\DataProvider' => true,
            'Derafu\\Signature\\Contract\\SignatureGeneratorInterface' => true,
            'Derafu\\Signature\\Contract\\SignatureServiceInterface' => true,
            'Derafu\\Signature\\Contract\\SignatureValidatorInterface' => true,
            'Derafu\\Xml\\Contract\\XmlDecoderInterface' => true,
            'Derafu\\Xml\\Contract\\XmlEncoderInterface' => true,
            'Derafu\\Xml\\Contract\\XmlServiceInterface' => true,
            'Derafu\\Xml\\Contract\\XmlValidatorInterface' => true,
            'libredte.lib.billing.book' => true,
            'libredte.lib.billing.document' => true,
            'libredte.lib.billing.document.batch_processor' => true,
            'libredte.lib.billing.document.batch_processor.strategy:spreadsheet.csv' => true,
            'libredte.lib.billing.document.builder' => true,
            'libredte.lib.billing.document.builder.strategy:boleta_afecta' => true,
            'libredte.lib.billing.document.builder.strategy:boleta_exenta' => true,
            'libredte.lib.billing.document.builder.strategy:factura_afecta' => true,
            'libredte.lib.billing.document.builder.strategy:factura_compra' => true,
            'libredte.lib.billing.document.builder.strategy:factura_exenta' => true,
            'libredte.lib.billing.document.builder.strategy:factura_exportacion' => true,
            'libredte.lib.billing.document.builder.strategy:guia_despacho' => true,
            'libredte.lib.billing.document.builder.strategy:liquidacion_factura' => true,
            'libredte.lib.billing.document.builder.strategy:nota_credito' => true,
            'libredte.lib.billing.document.builder.strategy:nota_credito_exportacion' => true,
            'libredte.lib.billing.document.builder.strategy:nota_debito' => true,
            'libredte.lib.billing.document.builder.strategy:nota_debito_exportacion' => true,
            'libredte.lib.billing.document.dispatcher' => true,
            'libredte.lib.billing.document.document_bag_manager' => true,
            'libredte.lib.billing.document.loader' => true,
            'libredte.lib.billing.document.normalizer' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_boleta_afecta' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_boleta_exenta' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_data_post_document_normalization' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_data_pre_document_normalization' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_factura_afecta' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_factura_compra' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_factura_exenta' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_factura_exportacion' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_guia_despacho' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_liquidacion_factura' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_nota_credito' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_nota_credito_exportacion' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_nota_debito' => true,
            'libredte.lib.billing.document.normalizer.job:normalize_nota_debito_exportacion' => true,
            'libredte.lib.billing.document.normalizer.strategy:boleta_afecta' => true,
            'libredte.lib.billing.document.normalizer.strategy:boleta_exenta' => true,
            'libredte.lib.billing.document.normalizer.strategy:factura_afecta' => true,
            'libredte.lib.billing.document.normalizer.strategy:factura_compra' => true,
            'libredte.lib.billing.document.normalizer.strategy:factura_exenta' => true,
            'libredte.lib.billing.document.normalizer.strategy:factura_exportacion' => true,
            'libredte.lib.billing.document.normalizer.strategy:guia_despacho' => true,
            'libredte.lib.billing.document.normalizer.strategy:liquidacion_factura' => true,
            'libredte.lib.billing.document.normalizer.strategy:nota_credito' => true,
            'libredte.lib.billing.document.normalizer.strategy:nota_credito_exportacion' => true,
            'libredte.lib.billing.document.normalizer.strategy:nota_debito' => true,
            'libredte.lib.billing.document.normalizer.strategy:nota_debito_exportacion' => true,
            'libredte.lib.billing.document.parser' => true,
            'libredte.lib.billing.document.parser.strategy:default.json' => true,
            'libredte.lib.billing.document.parser.strategy:default.xml' => true,
            'libredte.lib.billing.document.parser.strategy:default.yaml' => true,
            'libredte.lib.billing.document.parser.strategy:form.estandar' => true,
            'libredte.lib.billing.document.renderer' => true,
            'libredte.lib.billing.document.renderer.strategy:template.estandar' => true,
            'libredte.lib.billing.document.sanitizer' => true,
            'libredte.lib.billing.document.sanitizer.strategy:boleta_afecta' => true,
            'libredte.lib.billing.document.sanitizer.strategy:boleta_exenta' => true,
            'libredte.lib.billing.document.sanitizer.strategy:factura_afecta' => true,
            'libredte.lib.billing.document.sanitizer.strategy:factura_compra' => true,
            'libredte.lib.billing.document.sanitizer.strategy:factura_exenta' => true,
            'libredte.lib.billing.document.sanitizer.strategy:factura_exportacion' => true,
            'libredte.lib.billing.document.sanitizer.strategy:guia_despacho' => true,
            'libredte.lib.billing.document.sanitizer.strategy:liquidacion_factura' => true,
            'libredte.lib.billing.document.sanitizer.strategy:nota_credito' => true,
            'libredte.lib.billing.document.sanitizer.strategy:nota_credito_exportacion' => true,
            'libredte.lib.billing.document.sanitizer.strategy:nota_debito' => true,
            'libredte.lib.billing.document.sanitizer.strategy:nota_debito_exportacion' => true,
            'libredte.lib.billing.document.validator' => true,
            'libredte.lib.billing.document.validator.strategy:boleta_afecta' => true,
            'libredte.lib.billing.document.validator.strategy:boleta_exenta' => true,
            'libredte.lib.billing.document.validator.strategy:factura_afecta' => true,
            'libredte.lib.billing.document.validator.strategy:factura_compra' => true,
            'libredte.lib.billing.document.validator.strategy:factura_exenta' => true,
            'libredte.lib.billing.document.validator.strategy:factura_exportacion' => true,
            'libredte.lib.billing.document.validator.strategy:guia_despacho' => true,
            'libredte.lib.billing.document.validator.strategy:liquidacion_factura' => true,
            'libredte.lib.billing.document.validator.strategy:nota_credito' => true,
            'libredte.lib.billing.document.validator.strategy:nota_credito_exportacion' => true,
            'libredte.lib.billing.document.validator.strategy:nota_debito' => true,
            'libredte.lib.billing.document.validator.strategy:nota_debito_exportacion' => true,
            'libredte.lib.billing.exchange' => true,
            'libredte.lib.billing.exchange.receiver' => true,
            'libredte.lib.billing.exchange.receiver.handler:email_receiver' => true,
            'libredte.lib.billing.exchange.receiver.strategy:email.imap' => true,
            'libredte.lib.billing.exchange.sender' => true,
            'libredte.lib.billing.exchange.sender.handler:email_sender' => true,
            'libredte.lib.billing.exchange.sender.handler:sii_sender' => true,
            'libredte.lib.billing.exchange.sender.strategy:email.smtp' => true,
            'libredte.lib.billing.exchange.sender.strategy:sii.boleta' => true,
            'libredte.lib.billing.exchange.sender.strategy:sii.dte' => true,
            'libredte.lib.billing.identifier' => true,
            'libredte.lib.billing.identifier.caf_faker' => true,
            'libredte.lib.billing.identifier.caf_loader' => true,
            'libredte.lib.billing.identifier.caf_provider' => true,
            'libredte.lib.billing.identifier.caf_validator' => true,
            'libredte.lib.billing.integration' => true,
            'libredte.lib.billing.integration.sii_lazy' => true,
            'libredte.lib.billing.integration.sii_lazy.job:authenticate' => true,
            'libredte.lib.billing.integration.sii_lazy.job:check_xml_document_sent_status' => true,
            'libredte.lib.billing.integration.sii_lazy.job:consume_webservice' => true,
            'libredte.lib.billing.integration.sii_lazy.job:request_xml_document_sent_status_by_email' => true,
            'libredte.lib.billing.integration.sii_lazy.job:send_xml_document' => true,
            'libredte.lib.billing.integration.sii_lazy.job:validate_document' => true,
            'libredte.lib.billing.integration.sii_lazy.job:validate_document_signature' => true,
            'libredte.lib.billing.ownership_transfer' => true,
            'libredte.lib.billing.trading_parties' => true,
            'libredte.lib.billing.trading_parties.mandatario_manager' => true,
            'libredte.lib.mail.exchange' => true,
            'libredte\\lib\\Core\\Package\\Billing\\BillingPackage' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Book\\Contract\\BookComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BatchProcessorWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BuilderWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaAfectaBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaExentaBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaAfectaBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaCompraBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExentaBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExportacionBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\GuiaDespachoBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\LiquidacionFacturaBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoExportacionBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoExportacionBuilderStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DispatcherWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\LoaderWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaAfectaNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaExentaNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaAfectaNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaCompraNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExentaNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExportacionNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\GuiaDespachoNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\LiquidacionFacturaNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoExportacionNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoExportacionNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoNormalizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ParserWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\RendererWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaAfectaSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaExentaSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaAfectaSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaCompraSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExentaSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExportacionSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\GuiaDespachoSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\LiquidacionFacturaSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoExportacionSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoExportacionSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoSanitizerStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\TipoDocumentoFactoryInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaAfectaValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaExentaValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaAfectaValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaCompraValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExentaValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExportacionValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\GuiaDespachoValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\LiquidacionFacturaValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoExportacionValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoExportacionValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoValidatorStrategyInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Service\\TemplateDataFormatter' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\BatchProcessor\\Strategy\\Spreadsheet\\CsvBatchProcessorStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaAfectaJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaExentaJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaAfectaJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaCompraJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExentaJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExportacionJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeGuiaDespachoJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeLiquidacionFacturaJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoExportacionJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoExportacionJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\JsonParserStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\XmlParserStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\YamlParserStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Form\\EstandarParserStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Renderer\\Strategy\\Template\\EstandarRendererStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ExchangeComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ReceiverWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\SenderWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Handler\\EmailReceiverHandler' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Strategy\\Email\\ImapReceiverStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\EmailSenderHandler' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\SiiSenderHandler' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Email\\SmtpSenderStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\BoletaSenderStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\DteSenderStrategy' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafFakerWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafLoaderWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafValidatorWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\IdentifierComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\IntegrationComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\SiiLazyWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\CheckXmlDocumentSentStatusJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\RequestXmlDocumentSentStatusByEmailJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\SendXmlDocumentJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentSignatureJob' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\OwnershipTransfer\\Contract\\OwnershipTransferComponentInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorFactoryInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorProviderInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\MandatarioFactoryInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\MandatarioManagerWorkerInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorFactoryInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorProviderInterface' => true,
            'libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\TradingPartiesComponentInterface' => true,
        ];
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /**
     * Gets the public 'Derafu\Backbone\Contract\PackageRegistryInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\PackageRegistry
     */
    protected static function getPackageRegistryInterfaceService($container)
    {
        return $container->services['Derafu\\Backbone\\Contract\\PackageRegistryInterface'] = new \libredte\lib\Core\PackageRegistry(['billing' => ($container->services['libredte.lib.billing'] ?? self::getLibredte_Lib_BillingService($container))]);
    }

    /**
     * Gets the public 'libredte.lib.billing' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\BillingPackage
     */
    protected static function getLibredte_Lib_BillingService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['libredte.lib.billing'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\BillingPackage')->newLazyGhost(static function ($proxy) use ($container) { self::getLibredte_Lib_BillingService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Book\\Contract\\BookComponentInterface'] ?? self::getBookComponentInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentComponentInterface'] ?? self::getDocumentComponentInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ExchangeComponentInterface'] ?? self::getExchangeComponentInterface2Service($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\IdentifierComponentInterface'] ?? self::getIdentifierComponentInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\IntegrationComponentInterface'] ?? self::getIntegrationComponentInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\OwnershipTransfer\\Contract\\OwnershipTransferComponentInterface'] ?? self::getOwnershipTransferComponentInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\TradingPartiesComponentInterface'] ?? self::getTradingPartiesComponentInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'libredte.lib.mail' shared autowired service.
     *
     * @return \Derafu\Mail\MailPackage
     */
    protected static function getLibredte_Lib_MailService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['libredte.lib.mail'] = new \ReflectionClass('Derafu\Mail\MailPackage')->newLazyGhost(static function ($proxy) use ($container) { self::getLibredte_Lib_MailService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Mail\\Component\\Exchange\\Contract\\ExchangeComponentInterface'] ?? self::getExchangeComponentInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Derafu\Certificate\Contract\CertificateFakerInterface' shared autowired service.
     *
     * @return \Derafu\Certificate\Service\CertificateFaker
     */
    protected static function getCertificateFakerInterfaceService($container)
    {
        return $container->privates['Derafu\\Certificate\\Contract\\CertificateFakerInterface'] = new \Derafu\Certificate\Service\CertificateFaker(new \Derafu\Certificate\Service\CertificateLoader());
    }

    /**
     * Gets the private 'Derafu\Mail\Component\Exchange\Contract\ExchangeComponentInterface' shared autowired service.
     *
     * @return \Derafu\Mail\Component\Exchange\ExchangeComponent
     */
    protected static function getExchangeComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Derafu\\Mail\\Component\\Exchange\\Contract\\ExchangeComponentInterface'] = new \ReflectionClass('Derafu\Mail\Component\Exchange\ExchangeComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getExchangeComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Mail\\Component\\Exchange\\Worker\\Receiver\\Contract\\ReceiverWorkerInterface'] ??= new \Derafu\Mail\Component\Exchange\Worker\ReceiverWorker()), ($container->privates['Derafu\\Mail\\Component\\Exchange\\Worker\\Sender\\Contract\\SenderWorkerInterface'] ??= new \Derafu\Mail\Component\Exchange\Worker\SenderWorker())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Derafu\Renderer\Contract\RendererInterface' shared autowired service.
     *
     * @return \Derafu\Renderer\Contract\RendererInterface
     */
    protected static function getRendererInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Derafu\\Renderer\\Contract\\RendererInterface'] = $container->createProxy('RendererInterfaceProxy749d2eb', static fn () => \RendererInterfaceProxy749d2eb::createLazyProxy(static fn () => self::getRendererInterfaceService($container, false)));
        }

        return \Derafu\Renderer\Factory\RendererFactory::create(['engines' => ['twig', 'pdf'], 'paths' => ['/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/templates'], 'formatters' => ['billing_document' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Service\\TemplateDataFormatter'] ?? self::getTemplateDataFormatterService($container))]]);
    }

    /**
     * Gets the private 'Derafu\Repository\Contract\RepositoryManagerInterface' shared autowired service.
     *
     * @return \Derafu\Repository\Service\RepositoryManager
     */
    protected static function getRepositoryManagerInterfaceService($container)
    {
        return $container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] = new \Derafu\Repository\Service\RepositoryManager(new \Derafu\Repository\Service\DataProvider(['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaClausulaVenta' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_clausulas_venta.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaFormaPago' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_formas_pago.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaModalidadVenta' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_modalidades_venta.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaMoneda' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_moneda.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaPais' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_paises.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaPuerto' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_puertos.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaTipoBulto' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_tipos_bulto.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaTransporte' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_transportes.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\AduanaUnidad' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/aduana_unidades.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\Comuna' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/comunas.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\TipoDocumentoInterface' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/tipos_documento.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\FormaPago' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/formas_pago.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\FormaPagoExportacion' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/formas_pago_exportacion.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\ImpuestoAdicionalRetencion' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/impuestos_adicionales_retenciones.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\MedioPago' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/medios_pago.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\TagXml' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/tag_xml.php', 'libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Entity\\Traslado' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources/data/repository/traslados.php'], NULL, ['normalization' => ['idAttribute' => 'codigo', 'nameAttribute' => 'glosa']]));
    }

    /**
     * Gets the private 'Derafu\Signature\Contract\SignatureServiceInterface' shared autowired service.
     *
     * @return \Derafu\Signature\Service\SignatureService
     */
    protected static function getSignatureServiceInterfaceService($container)
    {
        $a = ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container));

        $b = new \Derafu\Signature\Service\SignatureGenerator($a);

        return $container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] = new \Derafu\Signature\Service\SignatureService($b, new \Derafu\Signature\Service\SignatureValidator($b, $a));
    }

    /**
     * Gets the private 'Derafu\Xml\Contract\XmlServiceInterface' shared autowired service.
     *
     * @return \Derafu\Xml\Service\XmlService
     */
    protected static function getXmlServiceInterfaceService($container)
    {
        return $container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] = new \Derafu\Xml\Service\XmlService(new \Derafu\Xml\Service\XmlEncoder(), new \Derafu\Xml\Service\XmlDecoder(), new \Derafu\Xml\Service\XmlValidator());
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Book\Contract\BookComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Book\BookComponent
     */
    protected static function getBookComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Book\\Contract\\BookComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Book\BookComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getBookComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct() && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\BatchProcessorWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\BatchProcessorWorker
     */
    protected static function getBatchProcessorWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BatchProcessorWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\BatchProcessorWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getBatchProcessorWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderInterface'] ?? self::getCafProviderInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BuilderWorkerInterface'] ?? self::getBuilderWorkerInterfaceService($container)), [], [], new RewindableGenerator(function () use ($container) {
            yield 'spreadsheet.csv' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\BatchProcessor\\Strategy\\Spreadsheet\\CsvBatchProcessorStrategy'] ?? self::getCsvBatchProcessorStrategyService($container));
        }, 1)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\BuilderWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\BuilderWorker
     */
    protected static function getBuilderWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BuilderWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\BuilderWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getBuilderWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container)), [], [], new RewindableGenerator(function () use ($container) {
            yield 'boleta_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaAfectaBuilderStrategyInterface'] ?? self::getBoletaAfectaBuilderStrategyInterfaceService($container));
            yield 'boleta_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaExentaBuilderStrategyInterface'] ?? self::getBoletaExentaBuilderStrategyInterfaceService($container));
            yield 'factura_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaAfectaBuilderStrategyInterface'] ?? self::getFacturaAfectaBuilderStrategyInterfaceService($container));
            yield 'factura_compra' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaCompraBuilderStrategyInterface'] ?? self::getFacturaCompraBuilderStrategyInterfaceService($container));
            yield 'factura_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExentaBuilderStrategyInterface'] ?? self::getFacturaExentaBuilderStrategyInterfaceService($container));
            yield 'factura_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExportacionBuilderStrategyInterface'] ?? self::getFacturaExportacionBuilderStrategyInterfaceService($container));
            yield 'guia_despacho' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\GuiaDespachoBuilderStrategyInterface'] ?? self::getGuiaDespachoBuilderStrategyInterfaceService($container));
            yield 'liquidacion_factura' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\LiquidacionFacturaBuilderStrategyInterface'] ?? self::getLiquidacionFacturaBuilderStrategyInterfaceService($container));
            yield 'nota_credito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoBuilderStrategyInterface'] ?? self::getNotaCreditoBuilderStrategyInterfaceService($container));
            yield 'nota_credito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoExportacionBuilderStrategyInterface'] ?? self::getNotaCreditoExportacionBuilderStrategyInterfaceService($container));
            yield 'nota_debito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoBuilderStrategyInterface'] ?? self::getNotaDebitoBuilderStrategyInterfaceService($container));
            yield 'nota_debito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoExportacionBuilderStrategyInterface'] ?? self::getNotaDebitoExportacionBuilderStrategyInterfaceService($container));
        }, 12)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\BoletaAfectaBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\BoletaAfectaBuilderStrategy
     */
    protected static function getBoletaAfectaBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaAfectaBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\BoletaAfectaBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaAfectaBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\BoletaExentaBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\BoletaExentaBuilderStrategy
     */
    protected static function getBoletaExentaBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\BoletaExentaBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\BoletaExentaBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaExentaBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\FacturaAfectaBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaAfectaBuilderStrategy
     */
    protected static function getFacturaAfectaBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaAfectaBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaAfectaBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaAfectaBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\FacturaCompraBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaCompraBuilderStrategy
     */
    protected static function getFacturaCompraBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaCompraBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaCompraBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaCompraBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\FacturaExentaBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaExentaBuilderStrategy
     */
    protected static function getFacturaExentaBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExentaBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaExentaBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExentaBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\FacturaExportacionBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaExportacionBuilderStrategy
     */
    protected static function getFacturaExportacionBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\FacturaExportacionBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\FacturaExportacionBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExportacionBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\GuiaDespachoBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\GuiaDespachoBuilderStrategy
     */
    protected static function getGuiaDespachoBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\GuiaDespachoBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\GuiaDespachoBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getGuiaDespachoBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\LiquidacionFacturaBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\LiquidacionFacturaBuilderStrategy
     */
    protected static function getLiquidacionFacturaBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\LiquidacionFacturaBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\LiquidacionFacturaBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getLiquidacionFacturaBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\NotaCreditoBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaCreditoBuilderStrategy
     */
    protected static function getNotaCreditoBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaCreditoBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\NotaCreditoExportacionBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaCreditoExportacionBuilderStrategy
     */
    protected static function getNotaCreditoExportacionBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaCreditoExportacionBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaCreditoExportacionBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoExportacionBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\NotaDebitoBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaDebitoBuilderStrategy
     */
    protected static function getNotaDebitoBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaDebitoBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Builder\Strategy\NotaDebitoExportacionBuilderStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaDebitoExportacionBuilderStrategy
     */
    protected static function getNotaDebitoExportacionBuilderStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Builder\\Strategy\\NotaDebitoExportacionBuilderStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Builder\Strategy\NotaDebitoExportacionBuilderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoExportacionBuilderStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\DispatcherWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\DispatcherWorker
     */
    protected static function getDispatcherWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DispatcherWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\DispatcherWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getDispatcherWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\DocumentBagManagerWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\DocumentBagManagerWorker
     */
    protected static function getDocumentBagManagerWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\DocumentBagManagerWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getDocumentBagManagerWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BuilderWorkerInterface'] ?? self::getBuilderWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ParserWorkerInterface'] ?? self::getParserWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\EmisorFactory()), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\ReceptorFactory())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\DocumentComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\DocumentComponent
     */
    protected static function getDocumentComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\DocumentComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getDocumentComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BatchProcessorWorkerInterface'] ?? self::getBatchProcessorWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\BuilderWorkerInterface'] ?? self::getBuilderWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DispatcherWorkerInterface'] ?? self::getDispatcherWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\LoaderWorkerInterface'] ?? self::getLoaderWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] ?? self::getNormalizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ParserWorkerInterface'] ?? self::getParserWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\RendererWorkerInterface'] ?? self::getRendererWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] ?? self::getSanitizerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] ?? self::getValidatorWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafLoaderWorkerInterface'] ?? self::getCafLoaderWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\LoaderWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\LoaderWorker
     */
    protected static function getLoaderWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\LoaderWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\LoaderWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getLoaderWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ParserWorkerInterface'] ?? self::getParserWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\NormalizerWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\NormalizerWorker
     */
    protected static function getNormalizerWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\NormalizerWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\NormalizerWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizerWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(new RewindableGenerator(function () use ($container) {
            yield 'boleta_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaAfectaNormalizerStrategyInterface'] ?? self::getBoletaAfectaNormalizerStrategyInterfaceService($container));
            yield 'boleta_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaExentaNormalizerStrategyInterface'] ?? self::getBoletaExentaNormalizerStrategyInterfaceService($container));
            yield 'factura_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaAfectaNormalizerStrategyInterface'] ?? self::getFacturaAfectaNormalizerStrategyInterfaceService($container));
            yield 'factura_compra' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaCompraNormalizerStrategyInterface'] ?? self::getFacturaCompraNormalizerStrategyInterfaceService($container));
            yield 'factura_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExentaNormalizerStrategyInterface'] ?? self::getFacturaExentaNormalizerStrategyInterfaceService($container));
            yield 'factura_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExportacionNormalizerStrategyInterface'] ?? self::getFacturaExportacionNormalizerStrategyInterfaceService($container));
            yield 'guia_despacho' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\GuiaDespachoNormalizerStrategyInterface'] ?? self::getGuiaDespachoNormalizerStrategyInterfaceService($container));
            yield 'liquidacion_factura' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\LiquidacionFacturaNormalizerStrategyInterface'] ?? self::getLiquidacionFacturaNormalizerStrategyInterfaceService($container));
            yield 'nota_credito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoNormalizerStrategyInterface'] ?? self::getNotaCreditoNormalizerStrategyInterfaceService($container));
            yield 'nota_credito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoExportacionNormalizerStrategyInterface'] ?? self::getNotaCreditoExportacionNormalizerStrategyInterfaceService($container));
            yield 'nota_debito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoNormalizerStrategyInterface'] ?? self::getNotaDebitoNormalizerStrategyInterfaceService($container));
            yield 'nota_debito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoExportacionNormalizerStrategyInterface'] ?? self::getNotaDebitoExportacionNormalizerStrategyInterfaceService($container));
        }, 12)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\BoletaAfectaNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\BoletaAfectaNormalizerStrategy
     */
    protected static function getBoletaAfectaNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaAfectaNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\BoletaAfectaNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaAfectaNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaAfectaJob'] ?? self::getNormalizeBoletaAfectaJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\BoletaExentaNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\BoletaExentaNormalizerStrategy
     */
    protected static function getBoletaExentaNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\BoletaExentaNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\BoletaExentaNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaExentaNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaExentaJob'] ?? self::getNormalizeBoletaExentaJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\FacturaAfectaNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaAfectaNormalizerStrategy
     */
    protected static function getFacturaAfectaNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaAfectaNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaAfectaNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaAfectaNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaAfectaJob'] ?? self::getNormalizeFacturaAfectaJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\FacturaCompraNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaCompraNormalizerStrategy
     */
    protected static function getFacturaCompraNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaCompraNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaCompraNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaCompraNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaCompraJob'] ?? self::getNormalizeFacturaCompraJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\FacturaExentaNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaExentaNormalizerStrategy
     */
    protected static function getFacturaExentaNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExentaNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaExentaNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExentaNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExentaJob'] ?? self::getNormalizeFacturaExentaJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\FacturaExportacionNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaExportacionNormalizerStrategy
     */
    protected static function getFacturaExportacionNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\FacturaExportacionNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\FacturaExportacionNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExportacionNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExportacionJob'] ?? self::getNormalizeFacturaExportacionJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\GuiaDespachoNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\GuiaDespachoNormalizerStrategy
     */
    protected static function getGuiaDespachoNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\GuiaDespachoNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\GuiaDespachoNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getGuiaDespachoNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeGuiaDespachoJob'] ?? self::getNormalizeGuiaDespachoJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\LiquidacionFacturaNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\LiquidacionFacturaNormalizerStrategy
     */
    protected static function getLiquidacionFacturaNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\LiquidacionFacturaNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\LiquidacionFacturaNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getLiquidacionFacturaNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeLiquidacionFacturaJob'] ?? self::getNormalizeLiquidacionFacturaJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\NotaCreditoExportacionNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaCreditoExportacionNormalizerStrategy
     */
    protected static function getNotaCreditoExportacionNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoExportacionNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaCreditoExportacionNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoExportacionNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoExportacionJob'] ?? self::getNormalizeNotaCreditoExportacionJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\NotaCreditoNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaCreditoNormalizerStrategy
     */
    protected static function getNotaCreditoNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaCreditoNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaCreditoNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoJob'] ?? self::getNormalizeNotaCreditoJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\NotaDebitoExportacionNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaDebitoExportacionNormalizerStrategy
     */
    protected static function getNotaDebitoExportacionNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoExportacionNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaDebitoExportacionNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoExportacionNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoExportacionJob'] ?? self::getNormalizeNotaDebitoExportacionJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Normalizer\Strategy\NotaDebitoNormalizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaDebitoNormalizerStrategy
     */
    protected static function getNotaDebitoNormalizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Normalizer\\Strategy\\NotaDebitoNormalizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Strategy\NotaDebitoNormalizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoNormalizerStrategyInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] ?? self::getNormalizeDataPreDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] ?? self::getNormalizeDataPostDocumentNormalizationJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoJob'] ?? self::getNormalizeNotaDebitoJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\ParserWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\ParserWorker
     */
    protected static function getParserWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ParserWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\ParserWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getParserWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(new RewindableGenerator(function () use ($container) {
            yield 'default.json' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\JsonParserStrategy'] ?? self::getJsonParserStrategyService($container));
            yield 'default.yaml' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\YamlParserStrategy'] ?? self::getYamlParserStrategyService($container));
            yield 'default.xml' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\XmlParserStrategy'] ?? self::getXmlParserStrategyService($container));
            yield 'form.estandar' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Form\\EstandarParserStrategy'] ?? self::getEstandarParserStrategyService($container));
        }, 4)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\RendererWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\RendererWorker
     */
    protected static function getRendererWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\RendererWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\RendererWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getRendererWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container)), new RewindableGenerator(function () use ($container) {
            yield 'template.estandar' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Renderer\\Strategy\\Template\\EstandarRendererStrategy'] ?? self::getEstandarRendererStrategyService($container));
        }, 1)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\SanitizerWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\SanitizerWorker
     */
    protected static function getSanitizerWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\SanitizerWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\SanitizerWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getSanitizerWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(new RewindableGenerator(function () use ($container) {
            yield 'boleta_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaAfectaSanitizerStrategyInterface'] ?? self::getBoletaAfectaSanitizerStrategyInterfaceService($container));
            yield 'boleta_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaExentaSanitizerStrategyInterface'] ?? self::getBoletaExentaSanitizerStrategyInterfaceService($container));
            yield 'factura_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaAfectaSanitizerStrategyInterface'] ?? self::getFacturaAfectaSanitizerStrategyInterfaceService($container));
            yield 'factura_compra' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaCompraSanitizerStrategyInterface'] ?? self::getFacturaCompraSanitizerStrategyInterfaceService($container));
            yield 'factura_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExentaSanitizerStrategyInterface'] ?? self::getFacturaExentaSanitizerStrategyInterfaceService($container));
            yield 'factura_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExportacionSanitizerStrategyInterface'] ?? self::getFacturaExportacionSanitizerStrategyInterfaceService($container));
            yield 'guia_despacho' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\GuiaDespachoSanitizerStrategyInterface'] ?? self::getGuiaDespachoSanitizerStrategyInterfaceService($container));
            yield 'liquidacion_factura' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\LiquidacionFacturaSanitizerStrategyInterface'] ?? self::getLiquidacionFacturaSanitizerStrategyInterfaceService($container));
            yield 'nota_credito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoSanitizerStrategyInterface'] ?? self::getNotaCreditoSanitizerStrategyInterfaceService($container));
            yield 'nota_credito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoExportacionSanitizerStrategyInterface'] ?? self::getNotaCreditoExportacionSanitizerStrategyInterfaceService($container));
            yield 'nota_debito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoSanitizerStrategyInterface'] ?? self::getNotaDebitoSanitizerStrategyInterfaceService($container));
            yield 'nota_debito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoExportacionSanitizerStrategyInterface'] ?? self::getNotaDebitoExportacionSanitizerStrategyInterfaceService($container));
        }, 12)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\BoletaAfectaSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\BoletaAfectaSanitizerStrategy
     */
    protected static function getBoletaAfectaSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaAfectaSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\BoletaAfectaSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaAfectaSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\BoletaExentaSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\BoletaExentaSanitizerStrategy
     */
    protected static function getBoletaExentaSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\BoletaExentaSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\BoletaExentaSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaExentaSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\FacturaAfectaSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaAfectaSanitizerStrategy
     */
    protected static function getFacturaAfectaSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaAfectaSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaAfectaSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaAfectaSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\FacturaCompraSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaCompraSanitizerStrategy
     */
    protected static function getFacturaCompraSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaCompraSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaCompraSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaCompraSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\FacturaExentaSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaExentaSanitizerStrategy
     */
    protected static function getFacturaExentaSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExentaSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaExentaSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExentaSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\FacturaExportacionSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaExportacionSanitizerStrategy
     */
    protected static function getFacturaExportacionSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\FacturaExportacionSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\FacturaExportacionSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExportacionSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\GuiaDespachoSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\GuiaDespachoSanitizerStrategy
     */
    protected static function getGuiaDespachoSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\GuiaDespachoSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\GuiaDespachoSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getGuiaDespachoSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\LiquidacionFacturaSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\LiquidacionFacturaSanitizerStrategy
     */
    protected static function getLiquidacionFacturaSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\LiquidacionFacturaSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\LiquidacionFacturaSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getLiquidacionFacturaSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\NotaCreditoExportacionSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaCreditoExportacionSanitizerStrategy
     */
    protected static function getNotaCreditoExportacionSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoExportacionSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaCreditoExportacionSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoExportacionSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\NotaCreditoSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaCreditoSanitizerStrategy
     */
    protected static function getNotaCreditoSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaCreditoSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaCreditoSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\NotaDebitoExportacionSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaDebitoExportacionSanitizerStrategy
     */
    protected static function getNotaDebitoExportacionSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoExportacionSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaDebitoExportacionSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoExportacionSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Sanitizer\Strategy\NotaDebitoSanitizerStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaDebitoSanitizerStrategy
     */
    protected static function getNotaDebitoSanitizerStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Sanitizer\\Strategy\\NotaDebitoSanitizerStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Sanitizer\Strategy\NotaDebitoSanitizerStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoSanitizerStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\ValidatorWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\ValidatorWorker
     */
    protected static function getValidatorWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\ValidatorWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\ValidatorWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getValidatorWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\DocumentBagManagerWorkerInterface'] ?? self::getDocumentBagManagerWorkerInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container)), [], [], new RewindableGenerator(function () use ($container) {
            yield 'boleta_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaAfectaValidatorStrategyInterface'] ?? self::getBoletaAfectaValidatorStrategyInterfaceService($container));
            yield 'boleta_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaExentaValidatorStrategyInterface'] ?? self::getBoletaExentaValidatorStrategyInterfaceService($container));
            yield 'factura_afecta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaAfectaValidatorStrategyInterface'] ?? self::getFacturaAfectaValidatorStrategyInterfaceService($container));
            yield 'factura_compra' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaCompraValidatorStrategyInterface'] ?? self::getFacturaCompraValidatorStrategyInterfaceService($container));
            yield 'factura_exenta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExentaValidatorStrategyInterface'] ?? self::getFacturaExentaValidatorStrategyInterfaceService($container));
            yield 'factura_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExportacionValidatorStrategyInterface'] ?? self::getFacturaExportacionValidatorStrategyInterfaceService($container));
            yield 'guia_despacho' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\GuiaDespachoValidatorStrategyInterface'] ?? self::getGuiaDespachoValidatorStrategyInterfaceService($container));
            yield 'liquidacion_factura' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\LiquidacionFacturaValidatorStrategyInterface'] ?? self::getLiquidacionFacturaValidatorStrategyInterfaceService($container));
            yield 'nota_credito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoValidatorStrategyInterface'] ?? self::getNotaCreditoValidatorStrategyInterfaceService($container));
            yield 'nota_credito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoExportacionValidatorStrategyInterface'] ?? self::getNotaCreditoExportacionValidatorStrategyInterfaceService($container));
            yield 'nota_debito' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoValidatorStrategyInterface'] ?? self::getNotaDebitoValidatorStrategyInterfaceService($container));
            yield 'nota_debito_exportacion' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoExportacionValidatorStrategyInterface'] ?? self::getNotaDebitoExportacionValidatorStrategyInterfaceService($container));
        }, 12)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\BoletaAfectaValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\BoletaAfectaValidatorStrategy
     */
    protected static function getBoletaAfectaValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaAfectaValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\BoletaAfectaValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaAfectaValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\BoletaExentaValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\BoletaExentaValidatorStrategy
     */
    protected static function getBoletaExentaValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\BoletaExentaValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\BoletaExentaValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaExentaValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\FacturaAfectaValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaAfectaValidatorStrategy
     */
    protected static function getFacturaAfectaValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaAfectaValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaAfectaValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaAfectaValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\FacturaCompraValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaCompraValidatorStrategy
     */
    protected static function getFacturaCompraValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaCompraValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaCompraValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaCompraValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\FacturaExentaValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaExentaValidatorStrategy
     */
    protected static function getFacturaExentaValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExentaValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaExentaValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExentaValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\FacturaExportacionValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaExportacionValidatorStrategy
     */
    protected static function getFacturaExportacionValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\FacturaExportacionValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\FacturaExportacionValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getFacturaExportacionValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\GuiaDespachoValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\GuiaDespachoValidatorStrategy
     */
    protected static function getGuiaDespachoValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\GuiaDespachoValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\GuiaDespachoValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getGuiaDespachoValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\LiquidacionFacturaValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\LiquidacionFacturaValidatorStrategy
     */
    protected static function getLiquidacionFacturaValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\LiquidacionFacturaValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\LiquidacionFacturaValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getLiquidacionFacturaValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\NotaCreditoExportacionValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaCreditoExportacionValidatorStrategy
     */
    protected static function getNotaCreditoExportacionValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoExportacionValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaCreditoExportacionValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoExportacionValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\NotaCreditoValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaCreditoValidatorStrategy
     */
    protected static function getNotaCreditoValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaCreditoValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaCreditoValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaCreditoValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\NotaDebitoExportacionValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaDebitoExportacionValidatorStrategy
     */
    protected static function getNotaDebitoExportacionValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoExportacionValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaDebitoExportacionValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoExportacionValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Contract\Validator\Strategy\NotaDebitoValidatorStrategyInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaDebitoValidatorStrategy
     */
    protected static function getNotaDebitoValidatorStrategyInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Contract\\Validator\\Strategy\\NotaDebitoValidatorStrategyInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Validator\Strategy\NotaDebitoValidatorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getNotaDebitoValidatorStrategyInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Service\TemplateDataFormatter' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Service\TemplateDataFormatter
     */
    protected static function getTemplateDataFormatterService($container)
    {
        return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Service\\TemplateDataFormatter'] = new \libredte\lib\Core\Package\Billing\Component\Document\Service\TemplateDataFormatter(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container)));
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\BatchProcessor\Strategy\Spreadsheet\CsvBatchProcessorStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\BatchProcessor\Strategy\Spreadsheet\CsvBatchProcessorStrategy
     */
    protected static function getCsvBatchProcessorStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\BatchProcessor\\Strategy\\Spreadsheet\\CsvBatchProcessorStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\BatchProcessor\Strategy\Spreadsheet\CsvBatchProcessorStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getCsvBatchProcessorStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaAfectaJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaAfectaJob
     */
    protected static function getNormalizeBoletaAfectaJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaAfectaJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaAfectaJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeBoletaAfectaJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaExentaJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaExentaJob
     */
    protected static function getNormalizeBoletaExentaJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeBoletaExentaJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeBoletaExentaJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeBoletaExentaJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPostDocumentNormalizationJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPostDocumentNormalizationJob
     */
    protected static function getNormalizeDataPostDocumentNormalizationJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPostDocumentNormalizationJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPostDocumentNormalizationJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeDataPostDocumentNormalizationJobService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPreDocumentNormalizationJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPreDocumentNormalizationJob
     */
    protected static function getNormalizeDataPreDocumentNormalizationJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeDataPreDocumentNormalizationJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeDataPreDocumentNormalizationJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeDataPreDocumentNormalizationJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorProviderInterface'] ?? self::getEmisorProviderInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorProviderInterface'] ?? self::getReceptorProviderInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\EmisorFactory()), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\ReceptorFactory())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaAfectaJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaAfectaJob
     */
    protected static function getNormalizeFacturaAfectaJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaAfectaJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaAfectaJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeFacturaAfectaJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaCompraJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaCompraJob
     */
    protected static function getNormalizeFacturaCompraJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaCompraJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaCompraJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeFacturaCompraJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExentaJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExentaJob
     */
    protected static function getNormalizeFacturaExentaJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExentaJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExentaJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeFacturaExentaJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExportacionJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExportacionJob
     */
    protected static function getNormalizeFacturaExportacionJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeFacturaExportacionJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeFacturaExportacionJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeFacturaExportacionJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeGuiaDespachoJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeGuiaDespachoJob
     */
    protected static function getNormalizeGuiaDespachoJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeGuiaDespachoJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeGuiaDespachoJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeGuiaDespachoJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeLiquidacionFacturaJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeLiquidacionFacturaJob
     */
    protected static function getNormalizeLiquidacionFacturaJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeLiquidacionFacturaJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeLiquidacionFacturaJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeLiquidacionFacturaJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoExportacionJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoExportacionJob
     */
    protected static function getNormalizeNotaCreditoExportacionJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoExportacionJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoExportacionJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeNotaCreditoExportacionJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoJob
     */
    protected static function getNormalizeNotaCreditoJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaCreditoJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaCreditoJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeNotaCreditoJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoExportacionJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoExportacionJob
     */
    protected static function getNormalizeNotaDebitoExportacionJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoExportacionJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoExportacionJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeNotaDebitoExportacionJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoJob
     */
    protected static function getNormalizeNotaDebitoJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Normalizer\\Job\\NormalizeNotaDebitoJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Normalizer\Job\NormalizeNotaDebitoJob')->newLazyGhost(static function ($proxy) use ($container) { self::getNormalizeNotaDebitoJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\JsonParserStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\JsonParserStrategy
     */
    protected static function getJsonParserStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\JsonParserStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\JsonParserStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getJsonParserStrategyService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\XmlParserStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\XmlParserStrategy
     */
    protected static function getXmlParserStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\XmlParserStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\XmlParserStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getXmlParserStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\YamlParserStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\YamlParserStrategy
     */
    protected static function getYamlParserStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Default\\YamlParserStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Default\YamlParserStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getYamlParserStrategyService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Form\EstandarParserStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Form\EstandarParserStrategy
     */
    protected static function getEstandarParserStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Parser\\Strategy\\Form\\EstandarParserStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Parser\Strategy\Form\EstandarParserStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getEstandarParserStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Document\Worker\Renderer\Strategy\Template\EstandarRendererStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Document\Worker\Renderer\Strategy\Template\EstandarRendererStrategy
     */
    protected static function getEstandarRendererStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Document\\Worker\\Renderer\\Strategy\\Template\\EstandarRendererStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Document\Worker\Renderer\Strategy\Template\EstandarRendererStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getEstandarRendererStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Renderer\\Contract\\RendererInterface'] ?? self::getRendererInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Contract\ExchangeComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\ExchangeComponent
     */
    protected static function getExchangeComponentInterface2Service($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ExchangeComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\ExchangeComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getExchangeComponentInterface2Service($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ReceiverWorkerInterface'] ?? self::getReceiverWorkerInterface2Service($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\SenderWorkerInterface'] ?? self::getSenderWorkerInterface2Service($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Contract\ReceiverWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\ReceiverWorker
     */
    protected static function getReceiverWorkerInterface2Service($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ReceiverWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\ReceiverWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getReceiverWorkerInterface2Service($container, $proxy); });
        }

        return ($lazyLoad->__construct(new RewindableGenerator(function () use ($container) {
            yield 'email_receiver' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Handler\\EmailReceiverHandler'] ?? self::getEmailReceiverHandlerService($container));
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 'email.imap' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Strategy\\Email\\ImapReceiverStrategy'] ?? self::getImapReceiverStrategyService($container));
        }, 1)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Contract\SenderWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\SenderWorker
     */
    protected static function getSenderWorkerInterface2Service($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\SenderWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\SenderWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getSenderWorkerInterface2Service($container, $proxy); });
        }

        return ($lazyLoad->__construct(new RewindableGenerator(function () use ($container) {
            yield 'email_sender' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\EmailSenderHandler'] ?? self::getEmailSenderHandlerService($container));
            yield 'sii_sender' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\SiiSenderHandler'] ?? self::getSiiSenderHandlerService($container));
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 'email.smtp' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Email\\SmtpSenderStrategy'] ?? self::getSmtpSenderStrategyService($container));
            yield 'sii.dte' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\DteSenderStrategy'] ?? self::getDteSenderStrategyService($container));
            yield 'sii.boleta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\BoletaSenderStrategy'] ?? self::getBoletaSenderStrategyService($container));
        }, 3)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Handler\EmailReceiverHandler' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Handler\EmailReceiverHandler
     */
    protected static function getEmailReceiverHandlerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Handler\\EmailReceiverHandler'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Handler\EmailReceiverHandler')->newLazyGhost(static function ($proxy) use ($container) { self::getEmailReceiverHandlerService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\ReceiverWorkerInterface'] ?? self::getReceiverWorkerInterface2Service($container)), ['email.imap' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Strategy\\Email\\ImapReceiverStrategy'] ?? self::getImapReceiverStrategyService($container))]) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Strategy\Email\ImapReceiverStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Strategy\Email\ImapReceiverStrategy
     */
    protected static function getImapReceiverStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Receiver\\Strategy\\Email\\ImapReceiverStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Receiver\Strategy\Email\ImapReceiverStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getImapReceiverStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->services['libredte.lib.mail'] ?? self::getLibredte_Lib_MailService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\EmailSenderHandler' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\EmailSenderHandler
     */
    protected static function getEmailSenderHandlerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\EmailSenderHandler'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\EmailSenderHandler')->newLazyGhost(static function ($proxy) use ($container) { self::getEmailSenderHandlerService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\SenderWorkerInterface'] ?? self::getSenderWorkerInterface2Service($container)), ['email.smtp' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Email\\SmtpSenderStrategy'] ?? self::getSmtpSenderStrategyService($container))]) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\SiiSenderHandler' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\SiiSenderHandler
     */
    protected static function getSiiSenderHandlerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Handler\\SiiSenderHandler'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Handler\SiiSenderHandler')->newLazyGhost(static function ($proxy) use ($container) { self::getSiiSenderHandlerService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Contract\\SenderWorkerInterface'] ?? self::getSenderWorkerInterface2Service($container)), ['sii.dte' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\DteSenderStrategy'] ?? self::getDteSenderStrategyService($container)), 'sii.boleta' => ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\BoletaSenderStrategy'] ?? self::getBoletaSenderStrategyService($container))]) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Email\SmtpSenderStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Email\SmtpSenderStrategy
     */
    protected static function getSmtpSenderStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Email\\SmtpSenderStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Email\SmtpSenderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getSmtpSenderStrategyService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->services['libredte.lib.mail'] ?? self::getLibredte_Lib_MailService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\BoletaSenderStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\BoletaSenderStrategy
     */
    protected static function getBoletaSenderStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\BoletaSenderStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\BoletaSenderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getBoletaSenderStrategyService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\DteSenderStrategy' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\DteSenderStrategy
     */
    protected static function getDteSenderStrategyService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Exchange\\Worker\\Sender\\Strategy\\Sii\\DteSenderStrategy'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Exchange\Worker\Sender\Strategy\Sii\DteSenderStrategy')->newLazyGhost(static function ($proxy) use ($container) { self::getDteSenderStrategyService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\CafFakerWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafFakerWorker
     */
    protected static function getCafFakerWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafFakerWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafFakerWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getCafFakerWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafLoaderWorkerInterface'] ?? self::getCafLoaderWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\CafLoaderWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafLoaderWorker
     */
    protected static function getCafLoaderWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafLoaderWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafLoaderWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getCafLoaderWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\EmisorFactory()), ($container->privates['Derafu\\Repository\\Contract\\RepositoryManagerInterface'] ?? self::getRepositoryManagerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\CafProviderInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\Service\FakeCafProvider
     */
    protected static function getCafProviderInterfaceService($container)
    {
        return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderInterface'] = new \libredte\lib\Core\Package\Billing\Component\Identifier\Service\FakeCafProvider(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafFakerWorkerInterface'] ?? self::getCafFakerWorkerInterfaceService($container)));
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\CafProviderWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafProviderWorker
     */
    protected static function getCafProviderWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafProviderWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getCafProviderWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderInterface'] ?? self::getCafProviderInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\CafValidatorWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafValidatorWorker
     */
    protected static function getCafValidatorWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafValidatorWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Identifier\Worker\CafValidatorWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getCafValidatorWorkerInterfaceService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Identifier\Contract\IdentifierComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Identifier\IdentifierComponent
     */
    protected static function getIdentifierComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\IdentifierComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Identifier\IdentifierComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getIdentifierComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafFakerWorkerInterface'] ?? self::getCafFakerWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafLoaderWorkerInterface'] ?? self::getCafLoaderWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafProviderWorkerInterface'] ?? self::getCafProviderWorkerInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Identifier\\Contract\\CafValidatorWorkerInterface'] ?? self::getCafValidatorWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Contract\IntegrationComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\IntegrationComponent
     */
    protected static function getIntegrationComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\IntegrationComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\IntegrationComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getIntegrationComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\SiiLazyWorkerInterface'] ?? self::getSiiLazyWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Contract\SiiLazyWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazyWorker
     */
    protected static function getSiiLazyWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Contract\\SiiLazyWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazyWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getSiiLazyWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\CheckXmlDocumentSentStatusJob'] ?? self::getCheckXmlDocumentSentStatusJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\RequestXmlDocumentSentStatusByEmailJob'] ?? self::getRequestXmlDocumentSentStatusByEmailJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\SendXmlDocumentJob'] ?? self::getSendXmlDocumentJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentJob'] ?? self::getValidateDocumentJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentSignatureJob'] ?? self::getValidateDocumentSignatureJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\AuthenticateJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\AuthenticateJob
     */
    protected static function getAuthenticateJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\AuthenticateJob')->newLazyGhost(static function ($proxy) use ($container) { self::getAuthenticateJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['Derafu\\Signature\\Contract\\SignatureServiceInterface'] ?? self::getSignatureServiceInterfaceService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\CheckXmlDocumentSentStatusJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\CheckXmlDocumentSentStatusJob
     */
    protected static function getCheckXmlDocumentSentStatusJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\CheckXmlDocumentSentStatusJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\CheckXmlDocumentSentStatusJob')->newLazyGhost(static function ($proxy) use ($container) { self::getCheckXmlDocumentSentStatusJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ConsumeWebserviceJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ConsumeWebserviceJob
     */
    protected static function getConsumeWebserviceJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ConsumeWebserviceJob')->newLazyGhost(static function ($proxy) use ($container) { self::getConsumeWebserviceJobService($container, $proxy); });
        }

        return $lazyLoad;
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\RequestXmlDocumentSentStatusByEmailJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\RequestXmlDocumentSentStatusByEmailJob
     */
    protected static function getRequestXmlDocumentSentStatusByEmailJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\RequestXmlDocumentSentStatusByEmailJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\RequestXmlDocumentSentStatusByEmailJob')->newLazyGhost(static function ($proxy) use ($container) { self::getRequestXmlDocumentSentStatusByEmailJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\SendXmlDocumentJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\SendXmlDocumentJob
     */
    protected static function getSendXmlDocumentJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\SendXmlDocumentJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\SendXmlDocumentJob')->newLazyGhost(static function ($proxy) use ($container) { self::getSendXmlDocumentJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentJob
     */
    protected static function getValidateDocumentJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentJob')->newLazyGhost(static function ($proxy) use ($container) { self::getValidateDocumentJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentSignatureJob' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentSignatureJob
     */
    protected static function getValidateDocumentSignatureJobService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ValidateDocumentSignatureJob'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\Integration\Worker\SiiLazy\Job\ValidateDocumentSignatureJob')->newLazyGhost(static function ($proxy) use ($container) { self::getValidateDocumentSignatureJobService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\AuthenticateJob'] ?? self::getAuthenticateJobService($container)), ($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\Integration\\Worker\\SiiLazy\\Job\\ConsumeWebserviceJob'] ?? self::getConsumeWebserviceJobService($container)), ($container->privates['Derafu\\Xml\\Contract\\XmlServiceInterface'] ?? self::getXmlServiceInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\OwnershipTransfer\Contract\OwnershipTransferComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\OwnershipTransfer\OwnershipTransferComponent
     */
    protected static function getOwnershipTransferComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\OwnershipTransfer\\Contract\\OwnershipTransferComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\OwnershipTransfer\OwnershipTransferComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getOwnershipTransferComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct() && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\TradingParties\Contract\EmisorProviderInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\TradingParties\Service\FakeEmisorProvider
     */
    protected static function getEmisorProviderInterfaceService($container)
    {
        return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorProviderInterface'] = new \libredte\lib\Core\Package\Billing\Component\TradingParties\Service\FakeEmisorProvider(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\EmisorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\EmisorFactory()));
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\TradingParties\Contract\MandatarioManagerWorkerInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\TradingParties\Worker\MandatarioManagerWorker
     */
    protected static function getMandatarioManagerWorkerInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\MandatarioManagerWorkerInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\TradingParties\Worker\MandatarioManagerWorker')->newLazyGhost(static function ($proxy) use ($container) { self::getMandatarioManagerWorkerInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\MandatarioFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\MandatarioFactory()), ($container->privates['Derafu\\Certificate\\Contract\\CertificateFakerInterface'] ?? self::getCertificateFakerInterfaceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\TradingParties\Contract\ReceptorProviderInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\TradingParties\Service\FakeReceptorProvider
     */
    protected static function getReceptorProviderInterfaceService($container)
    {
        return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorProviderInterface'] = new \libredte\lib\Core\Package\Billing\Component\TradingParties\Service\FakeReceptorProvider(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\ReceptorFactoryInterface'] ??= new \libredte\lib\Core\Package\Billing\Component\TradingParties\Factory\ReceptorFactory()));
    }

    /**
     * Gets the private 'libredte\lib\Core\Package\Billing\Component\TradingParties\Contract\TradingPartiesComponentInterface' shared autowired service.
     *
     * @return \libredte\lib\Core\Package\Billing\Component\TradingParties\TradingPartiesComponent
     */
    protected static function getTradingPartiesComponentInterfaceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\TradingPartiesComponentInterface'] = new \ReflectionClass('libredte\lib\Core\Package\Billing\Component\TradingParties\TradingPartiesComponent')->newLazyGhost(static function ($proxy) use ($container) { self::getTradingPartiesComponentInterfaceService($container, $proxy); });
        }

        return ($lazyLoad->__construct(($container->privates['libredte\\lib\\Core\\Package\\Billing\\Component\\TradingParties\\Contract\\MandatarioManagerWorkerInterface'] ?? self::getMandatarioManagerWorkerInterfaceService($container))) && false ?: $lazyLoad);
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }

        if (isset($this->loadedDynamicParameters[$name])) {
            $value = $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        } else {
            $value = $this->parameters[$name];
        }

        return $value;
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (!isset($this->parameterBag)) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters, []);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new ParameterNotFoundException($name);
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source',
            'kernel.cache_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/var/cache/dev',
            'kernel.config_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/config',
            'kernel.log_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/var/log',
            'kernel.resources_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/resources',
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.context' => [

            ],
            'env.SYMFONY_DOTENV_PATH' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source/.env',
            'env.NODE_TLS_REJECT_UNAUTHORIZED' => '0',
            'env.SYMFONY_DOTENV_VARS' => 'NODE_TLS_REJECT_UNAUTHORIZED,APP_ENV',
            'env.APP_ENV' => 'dev',
            'libredte.lib.core.project_dir' => '/home/crodriguez/code/csneaits/sii-boleta-dte-source',
        ];
    }
}

class RendererInterfaceProxy749d2eb implements \Derafu\Renderer\Contract\RendererInterface, \Symfony\Component\VarExporter\LazyObjectInterface
{
    use \Symfony\Component\VarExporter\Internal\LazyDecoratorTrait;

    private const LAZY_OBJECT_PROPERTY_SCOPES = [];

    public function initializeLazyObject(): \Derafu\Renderer\Contract\RendererInterface
    {
        return $this->lazyObjectState->realInstance;
    }

    public function render(string $template, array $data = [], array $options = []): string
    {
        return $this->lazyObjectState->realInstance->render(...\func_get_args());
    }

    public function getEngine(string $name): \Derafu\Renderer\Contract\EngineInterface
    {
        return $this->lazyObjectState->realInstance->getEngine(...\func_get_args());
    }

    public function addEngine(string $name, \Derafu\Renderer\Contract\EngineInterface $engine): static
    {
        ${0} = $this->lazyObjectState->realInstance;
        ${1} = ${0}->addEngine(...\func_get_args());

        return match (true) {
            ${1} === ${0} => $this,
            !${1} instanceof ${0} || !${0} instanceof ${1} => ${1},
            null !== $this->lazyObjectState->cloneInstance =& ${1} => clone $this,
        };
    }
}

// Help opcache.preload discover always-needed symbols
class_exists(\Symfony\Component\VarExporter\Internal\Hydrator::class);
class_exists(\Symfony\Component\VarExporter\Internal\LazyObjectRegistry::class);
